import React, { useState, useEffect, useRef } from 'react';
import { 
  X, 
  Save, 
  Wand2, 
  RefreshCw, 
  Copy, 
  Download, 
  Share2, 
  Trash2,
  Edit3,
  FileText,
  Mic,
  Camera,
  Upload,
  Sparkles,
  Brain,
  Zap,
  CheckCircle,
  AlertCircle,
  Clock,
  Tag,
  Folder
} from 'lucide-react';
import { Note } from '../types';

interface NoteEditorProps {
  note: Note;
  isOpen: boolean;
  onClose: () => void;
  onSave: (updatedNote: Note) => void;
  onDelete?: () => void;
}

function NoteEditor({ note, isOpen, onClose, onSave, onDelete }: NoteEditorProps) {
  const [editedNote, setEditedNote] = useState<Note>(note);
  const [isAiProcessing, setIsAiProcessing] = useState(false);
  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);
  const [showAiPanel, setShowAiPanel] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [autoSaveStatus, setAutoSaveStatus] = useState<'saved' | 'saving' | 'unsaved'>('saved');
  const [selectedText, setSelectedText] = useState('');
  const [aiAction, setAiAction] = useState<string>('');
  
  const contentRef = useRef<HTMLTextAreaElement>(null);
  const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    setEditedNote(note);
    setHasUnsavedChanges(false);
    setAutoSaveStatus('saved');
  }, [note]);

  useEffect(() => {
    // Auto-save functionality
    if (hasUnsavedChanges) {
      setAutoSaveStatus('unsaved');
      
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
      
      autoSaveTimeoutRef.current = setTimeout(() => {
        handleAutoSave();
      }, 2000); // Auto-save after 2 seconds of inactivity
    }

    return () => {
      if (autoSaveTimeoutRef.current) {
        clearTimeout(autoSaveTimeoutRef.current);
      }
    };
  }, [hasUnsavedChanges, editedNote]);

  if (!isOpen) return null;

  const handleAutoSave = async () => {
    setAutoSaveStatus('saving');
    
    // Simulate auto-save
    setTimeout(() => {
      onSave(editedNote);
      setHasUnsavedChanges(false);
      setAutoSaveStatus('saved');
    }, 500);
  };

  const handleSave = () => {
    onSave(editedNote);
    setHasUnsavedChanges(false);
    setAutoSaveStatus('saved');
    onClose();
  };

  const handleClose = () => {
    if (hasUnsavedChanges) {
      if (confirm('You have unsaved changes. Do you want to save before closing?')) {
        handleSave();
      } else {
        onClose();
      }
    } else {
      onClose();
    }
  };

  const updateNote = (field: keyof Note, value: any) => {
    setEditedNote(prev => ({
      ...prev,
      [field]: value,
      updatedAt: new Date()
    }));
    setHasUnsavedChanges(true);
  };

  const handleTextSelection = () => {
    if (contentRef.current) {
      const start = contentRef.current.selectionStart;
      const end = contentRef.current.selectionEnd;
      const selected = editedNote.content.substring(start, end);
      setSelectedText(selected);
    }
  };

  // AI Enhancement Functions
  const enhanceWithAI = async (action: string) => {
    setIsAiProcessing(true);
    setAiAction(action);
    
    // Simulate AI processing
    setTimeout(() => {
      let enhancedContent = editedNote.content;
      
      switch (action) {
        case 'improve':
          enhancedContent = `${editedNote.content}\n\n[AI Enhanced]\nThis content has been improved for clarity and structure. Key points have been highlighted and the flow has been optimized for better readability.`;
          break;
        case 'summarize':
          const summary = `## AI Summary\n\nKey Points:\n• Main topic: ${editedNote.title}\n• Content length: ${editedNote.content.length} characters\n• Category: ${editedNote.category}\n• Created: ${editedNote.createdAt.toLocaleDateString()}\n\nThis note contains important information that has been automatically summarized for quick reference.\n\n---\n\n${editedNote.content}`;
          enhancedContent = summary;
          break;
        case 'expand':
          enhancedContent = `${editedNote.content}\n\n## Additional Context\n\nBased on the content above, here are some related considerations:\n\n• Further research opportunities\n• Potential applications\n• Related concepts to explore\n• Action items to consider\n\n[This section was generated by AI to provide additional context and suggestions]`;
          break;
        case 'structure':
          const lines = editedNote.content.split('\n').filter(line => line.trim());
          enhancedContent = `# ${editedNote.title}\n\n## Overview\n${lines[0] || 'Main content overview'}\n\n## Details\n${lines.slice(1).map(line => `• ${line}`).join('\n')}\n\n## Summary\nThis note has been restructured for better organization and readability.`;
          break;
        case 'translate':
          enhancedContent = `${editedNote.content}\n\n---\n\n## Translation (Spanish)\n[AI Translation]: Este contenido ha sido traducido automáticamente. El contenido original se mantiene arriba para referencia.`;
          break;
        case 'keywords':
          const keywords = ['productivity', 'organization', 'efficiency', 'planning', 'analysis'];
          enhancedContent = `${editedNote.content}\n\n---\n\n## AI-Generated Keywords\n${keywords.map(kw => `#${kw}`).join(' ')}\n\nThese keywords have been automatically generated to improve searchability.`;
          break;
      }
      
      updateNote('content', enhancedContent);
      setIsAiProcessing(false);
      setAiAction('');
      
      // Generate AI suggestions
      const suggestions = [
        'Add more specific examples',
        'Include relevant timestamps',
        'Create action items',
        'Add related links',
        'Organize into sections'
      ];
      setAiSuggestions(suggestions);
    }, 2000);
  };

  const applySuggestion = (suggestion: string) => {
    const enhancedContent = `${editedNote.content}\n\n[Applied Suggestion: ${suggestion}]\nThis improvement has been applied based on AI analysis.`;
    updateNote('content', enhancedContent);
    setAiSuggestions(prev => prev.filter(s => s !== suggestion));
  };

  const addTag = (tag: string) => {
    if (!editedNote.tags.includes(tag)) {
      updateNote('tags', [...editedNote.tags, tag]);
    }
  };

  const removeTag = (tagToRemove: string) => {
    updateNote('tags', editedNote.tags.filter(tag => tag !== tagToRemove));
  };

  const exportNote = () => {
    const dataStr = JSON.stringify(editedNote, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `${editedNote.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(editedNote.content);
    alert('Content copied to clipboard!');
  };

  const shareNote = () => {
    if (navigator.share) {
      navigator.share({
        title: editedNote.title,
        text: editedNote.content,
      });
    } else {
      copyToClipboard();
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-gray-900 border border-gray-800 rounded-2xl w-full max-w-6xl h-[90vh] flex overflow-hidden">
        {/* Main Editor */}
        <div className="flex-1 flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-800">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                {editedNote.type === 'text' && <FileText className="w-5 h-5 text-blue-400" />}
                {editedNote.type === 'audio' && <Mic className="w-5 h-5 text-red-400" />}
                {editedNote.type === 'video' && <Camera className="w-5 h-5 text-green-400" />}
                {editedNote.type === 'document' && <Upload className="w-5 h-5 text-purple-400" />}
                <span className="text-gray-400 text-sm capitalize">{editedNote.type}</span>
              </div>
              
              <div className="flex items-center space-x-2">
                {autoSaveStatus === 'saving' && (
                  <div className="flex items-center space-x-2 text-yellow-400">
                    <RefreshCw className="w-4 h-4 animate-spin" />
                    <span className="text-sm">Saving...</span>
                  </div>
                )}
                {autoSaveStatus === 'saved' && !hasUnsavedChanges && (
                  <div className="flex items-center space-x-2 text-green-400">
                    <CheckCircle className="w-4 h-4" />
                    <span className="text-sm">Saved</span>
                  </div>
                )}
                {autoSaveStatus === 'unsaved' && (
                  <div className="flex items-center space-x-2 text-orange-400">
                    <Clock className="w-4 h-4" />
                    <span className="text-sm">Unsaved changes</span>
                  </div>
                )}
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <button
                onClick={() => setShowAiPanel(!showAiPanel)}
                className={`p-2 rounded-lg transition-colors ${
                  showAiPanel 
                    ? 'bg-purple-500/20 text-purple-300' 
                    : 'text-gray-400 hover:text-white hover:bg-gray-800'
                }`}
                title="AI Assistant"
              >
                <Brain className="w-5 h-5" />
              </button>
              <button
                onClick={copyToClipboard}
                className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
                title="Copy content"
              >
                <Copy className="w-5 h-5" />
              </button>
              <button
                onClick={shareNote}
                className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
                title="Share note"
              >
                <Share2 className="w-5 h-5" />
              </button>
              <button
                onClick={exportNote}
                className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
                title="Export note"
              >
                <Download className="w-5 h-5" />
              </button>
              {onDelete && (
                <button
                  onClick={onDelete}
                  className="p-2 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-lg transition-colors"
                  title="Delete note"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              )}
              <button
                onClick={handleSave}
                className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors flex items-center space-x-2"
              >
                <Save className="w-4 h-4" />
                <span>Save</span>
              </button>
              <button
                onClick={handleClose}
                className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Content Editor */}
          <div className="flex-1 p-6 space-y-4">
            {/* Title */}
            <input
              type="text"
              value={editedNote.title}
              onChange={(e) => updateNote('title', e.target.value)}
              className="w-full text-2xl font-bold bg-transparent border-none text-white placeholder-gray-400 focus:outline-none"
              placeholder="Note title..."
            />

            {/* Metadata */}
            <div className="flex items-center space-x-4 text-sm text-gray-400">
              <div className="flex items-center space-x-2">
                <Folder className="w-4 h-4" />
                <select
                  value={editedNote.category}
                  onChange={(e) => updateNote('category', e.target.value)}
                  className="bg-gray-800 border border-gray-700 rounded px-2 py-1 text-white"
                >
                  <option value="Personal">Personal</option>
                  <option value="Work">Work</option>
                  <option value="Research">Research</option>
                  <option value="Ideas">Ideas</option>
                  <option value="Uploads">Uploads</option>
                </select>
              </div>
              <span>•</span>
              <span>Created {editedNote.createdAt.toLocaleDateString()}</span>
              <span>•</span>
              <span>Modified {editedNote.updatedAt.toLocaleDateString()}</span>
            </div>

            {/* Tags */}
            <div className="flex flex-wrap items-center gap-2">
              <Tag className="w-4 h-4 text-gray-400" />
              {editedNote.tags.map((tag, index) => (
                <span
                  key={index}
                  className="inline-flex items-center px-2 py-1 bg-purple-500/20 text-purple-300 text-sm rounded-full"
                >
                  #{tag}
                  <button
                    onClick={() => removeTag(tag)}
                    className="ml-1 text-purple-400 hover:text-purple-200"
                  >
                    <X className="w-3 h-3" />
                  </button>
                </span>
              ))}
              <input
                type="text"
                placeholder="Add tag..."
                className="px-2 py-1 bg-gray-800 border border-gray-700 rounded text-white text-sm"
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    const target = e.target as HTMLInputElement;
                    if (target.value.trim()) {
                      addTag(target.value.trim());
                      target.value = '';
                    }
                  }
                }}
              />
            </div>

            {/* Content */}
            <textarea
              ref={contentRef}
              value={editedNote.content}
              onChange={(e) => updateNote('content', e.target.value)}
              onSelect={handleTextSelection}
              className="w-full h-96 bg-gray-800/50 border border-gray-700 rounded-lg p-4 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500 resize-none"
              placeholder="Start writing your note..."
            />

            {/* Selected Text Actions */}
            {selectedText && (
              <div className="flex items-center space-x-2 p-3 bg-gray-800/50 rounded-lg border border-gray-700">
                <span className="text-sm text-gray-400">Selected: "{selectedText.substring(0, 50)}..."</span>
                <button
                  onClick={() => enhanceWithAI('improve')}
                  className="px-3 py-1 bg-purple-500/20 text-purple-300 rounded text-sm hover:bg-purple-500/30"
                >
                  Improve
                </button>
                <button
                  onClick={() => enhanceWithAI('summarize')}
                  className="px-3 py-1 bg-blue-500/20 text-blue-300 rounded text-sm hover:bg-blue-500/30"
                >
                  Summarize
                </button>
              </div>
            )}
          </div>
        </div>

        {/* AI Panel */}
        {showAiPanel && (
          <div className="w-80 border-l border-gray-800 bg-gray-900/50 flex flex-col">
            <div className="p-4 border-b border-gray-800">
              <div className="flex items-center space-x-2">
                <Brain className="w-5 h-5 text-purple-400" />
                <h3 className="font-semibold text-white">AI Assistant</h3>
              </div>
            </div>

            <div className="flex-1 p-4 space-y-4 overflow-y-auto">
              {/* AI Actions */}
              <div>
                <h4 className="text-sm font-semibold text-gray-300 mb-3">AI Enhancements</h4>
                <div className="grid grid-cols-2 gap-2">
                  {[
                    { action: 'improve', label: 'Improve', icon: Sparkles },
                    { action: 'summarize', label: 'Summarize', icon: FileText },
                    { action: 'expand', label: 'Expand', icon: Zap },
                    { action: 'structure', label: 'Structure', icon: Edit3 },
                    { action: 'translate', label: 'Translate', icon: Globe },
                    { action: 'keywords', label: 'Keywords', icon: Tag }
                  ].map(({ action, label, icon: Icon }) => (
                    <button
                      key={action}
                      onClick={() => enhanceWithAI(action)}
                      disabled={isAiProcessing}
                      className="flex flex-col items-center p-3 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors disabled:opacity-50"
                    >
                      <Icon className="w-5 h-5 text-purple-400 mb-1" />
                      <span className="text-xs text-gray-300">{label}</span>
                    </button>
                  ))}
                </div>
              </div>

              {/* AI Processing Status */}
              {isAiProcessing && (
                <div className="p-3 bg-purple-500/10 border border-purple-500/20 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <RefreshCw className="w-4 h-4 text-purple-400 animate-spin" />
                    <span className="text-purple-300 text-sm">
                      AI is {aiAction}ing your content...
                    </span>
                  </div>
                </div>
              )}

              {/* AI Suggestions */}
              {aiSuggestions.length > 0 && (
                <div>
                  <h4 className="text-sm font-semibold text-gray-300 mb-3">AI Suggestions</h4>
                  <div className="space-y-2">
                    {aiSuggestions.map((suggestion, index) => (
                      <div
                        key={index}
                        className="p-3 bg-gray-800/30 rounded-lg border border-gray-700"
                      >
                        <p className="text-gray-300 text-sm mb-2">{suggestion}</p>
                        <button
                          onClick={() => applySuggestion(suggestion)}
                          className="text-purple-400 hover:text-purple-300 text-xs"
                        >
                          Apply →
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Quick Actions */}
              <div>
                <h4 className="text-sm font-semibold text-gray-300 mb-3">Quick Actions</h4>
                <div className="space-y-2">
                  <button
                    onClick={() => updateNote('content', editedNote.content + '\n\n## Action Items\n- [ ] \n- [ ] \n- [ ] ')}
                    className="w-full p-2 bg-gray-800/30 rounded-lg text-left text-gray-300 text-sm hover:bg-gray-800/50"
                  >
                    Add Action Items
                  </button>
                  <button
                    onClick={() => updateNote('content', editedNote.content + '\n\n---\n\n**Meeting Notes Template**\n\n**Date:** ' + new Date().toLocaleDateString() + '\n**Attendees:** \n**Agenda:** \n**Notes:** \n**Action Items:** ')}
                    className="w-full p-2 bg-gray-800/30 rounded-lg text-left text-gray-300 text-sm hover:bg-gray-800/50"
                  >
                    Add Meeting Template
                  </button>
                  <button
                    onClick={() => updateNote('content', editedNote.content + '\n\n---\n\n**Timestamp:** ' + new Date().toLocaleString())}
                    className="w-full p-2 bg-gray-800/30 rounded-lg text-left text-gray-300 text-sm hover:bg-gray-800/50"
                  >
                    Add Timestamp
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default NoteEditor;