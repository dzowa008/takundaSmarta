import jsPDF from 'jspdf';
import { Note } from '../types';

export const generateNotePDF = (note: Note): void => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const maxWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addWrappedText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    pdf.setFontSize(fontSize);
    if (isBold) {
      pdf.setFont('helvetica', 'bold');
    } else {
      pdf.setFont('helvetica', 'normal');
    }

    const lines = pdf.splitTextToSize(text, maxWidth);
    
    // Check if we need a new page
    if (yPosition + (lines.length * fontSize * 0.5) > pageHeight - margin) {
      pdf.addPage();
      yPosition = margin;
    }

    pdf.text(lines, margin, yPosition);
    yPosition += lines.length * fontSize * 0.5 + 5;
  };

  // Add header
  pdf.setFillColor(147, 51, 234); // Purple color
  pdf.rect(0, 0, pageWidth, 40, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('DzowaAI Notes', margin, 25);
  
  yPosition = 60;
  pdf.setTextColor(0, 0, 0);

  // Add title
  addWrappedText(note.title, 18, true);
  yPosition += 10;

  // Add metadata
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Created: ${note.timestamp.toLocaleDateString()} ${note.timestamp.toLocaleTimeString()}`, margin, yPosition);
  yPosition += 15;
  
  if (note.updatedAt && note.updatedAt.getTime() !== note.timestamp.getTime()) {
    pdf.text(`Updated: ${note.updatedAt.toLocaleDateString()} ${note.updatedAt.toLocaleTimeString()}`, margin, yPosition);
    yPosition += 15;
  }

  pdf.text(`Category: ${note.category || 'Uncategorized'}`, margin, yPosition);
  yPosition += 15;

  if (note.tags && note.tags.length > 0) {
    pdf.text(`Tags: ${note.tags.join(', ')}`, margin, yPosition);
    yPosition += 15;
  }

  // Add separator line
  pdf.setDrawColor(200, 200, 200);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 20;

  // Add content
  pdf.setTextColor(0, 0, 0);
  
  // Process markdown-like content
  const contentLines = note.content.split('\n');
  
  for (const line of contentLines) {
    if (line.trim() === '') {
      yPosition += 10;
      continue;
    }

    // Handle headers
    if (line.startsWith('# ')) {
      addWrappedText(line.substring(2), 16, true);
    } else if (line.startsWith('## ')) {
      addWrappedText(line.substring(3), 14, true);
    } else if (line.startsWith('### ')) {
      addWrappedText(line.substring(4), 12, true);
    } else if (line.startsWith('- ') || line.startsWith('â€¢ ')) {
      addWrappedText(`  ${line}`, 11);
    } else if (line.startsWith('**') && line.endsWith('**')) {
      addWrappedText(line.substring(2, line.length - 2), 12, true);
    } else {
      addWrappedText(line, 11);
    }
  }

  // Add footer
  const totalPages = pdf.internal.pages.length - 1;
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${totalPages}`, pageWidth - 40, pageHeight - 10);
    pdf.text('Generated by DzowaAI Notes', margin, pageHeight - 10);
  }

  // Add metadata if available
  if (note.metadata) {
    pdf.setPage(1);
    let metadataY = pageHeight - 40;
    
    if (note.metadata.videoUrl) {
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Video URL: ${note.metadata.videoUrl}`, margin, metadataY);
      metadataY -= 10;
    }
    
    if (note.metadata.processedAt) {
      pdf.text(`Processed: ${new Date(note.metadata.processedAt).toLocaleString()}`, margin, metadataY);
    }
  }

  // Generate filename
  const sanitizedTitle = note.title.replace(/[^a-z0-9]/gi, '_').toLowerCase();
  const filename = `${sanitizedTitle}_${note.timestamp.toISOString().split('T')[0]}.pdf`;

  // Save the PDF
  pdf.save(filename);
};

export const generateMultipleNotesPDF = (notes: Note[]): void => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  
  // Add cover page
  pdf.setFillColor(147, 51, 234);
  pdf.rect(0, 0, pageWidth, pageHeight, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(28);
  pdf.setFont('helvetica', 'bold');
  pdf.text('DzowaAI Notes', pageWidth / 2, pageHeight / 2 - 20, { align: 'center' });
  
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`${notes.length} Notes Collection`, pageWidth / 2, pageHeight / 2 + 10, { align: 'center' });
  
  pdf.setFontSize(12);
  pdf.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth / 2, pageHeight / 2 + 30, { align: 'center' });

  // Add each note
  notes.forEach((note, index) => {
    pdf.addPage();
    
    let yPosition = margin;
    const maxWidth = pageWidth - 2 * margin;

    // Note header
    pdf.setFillColor(240, 240, 240);
    pdf.rect(0, 0, pageWidth, 50, 'F');
    
    pdf.setTextColor(0, 0, 0);
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    const titleLines = pdf.splitTextToSize(note.title, maxWidth);
    pdf.text(titleLines, margin, 30);
    
    yPosition = 70;
    
    // Metadata
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Created: ${note.timestamp.toLocaleDateString()}`, margin, yPosition);
    pdf.text(`Category: ${note.category || 'Uncategorized'}`, pageWidth - 100, yPosition);
    yPosition += 20;
    
    // Content
    pdf.setTextColor(0, 0, 0);
    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');
    
    const contentLines = pdf.splitTextToSize(note.content, maxWidth);
    
    for (let i = 0; i < contentLines.length; i++) {
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = margin;
      }
      pdf.text(contentLines[i], margin, yPosition);
      yPosition += 15;
    }
  });

  // Save the PDF
  const filename = `dzowa_notes_collection_${new Date().toISOString().split('T')[0]}.pdf`;
  pdf.save(filename);
};
